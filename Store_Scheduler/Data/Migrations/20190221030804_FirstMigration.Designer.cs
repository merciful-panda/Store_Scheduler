// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Store_Scheduler.Data;
using System;

namespace Store_Scheduler.Data.Migrations
{
    [DbContext(typeof(StoreSchedulerContext))]
    [Migration("20190221030804_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Store_Scheduler.Models.department_positions", b =>
                {
                    b.Property<int>("positionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("departmentID");

                    b.Property<int>("openSpots");

                    b.Property<string>("positionName");

                    b.Property<int>("shiftID");

                    b.Property<int>("skillID");

                    b.Property<int>("skillLevel");

                    b.Property<bool>("status");

                    b.HasKey("positionID");

                    b.HasIndex("departmentID");

                    b.HasIndex("shiftID");

                    b.HasIndex("skillID");

                    b.ToTable("department_positions");
                });

            modelBuilder.Entity("Store_Scheduler.Models.departments", b =>
                {
                    b.Property<int>("departmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description");

                    b.Property<string>("name");

                    b.Property<int>("openspot");

                    b.Property<int>("priority");

                    b.Property<int>("status");

                    b.Property<int>("storeID");

                    b.HasKey("departmentID");

                    b.HasIndex("storeID");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Store_Scheduler.Models.employee_skills", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("employeeID");

                    b.Property<int>("experience");

                    b.Property<int>("skillID");

                    b.HasKey("ID");

                    b.HasIndex("employeeID");

                    b.HasIndex("skillID");

                    b.ToTable("employee_skills");
                });

            modelBuilder.Entity("Store_Scheduler.Models.employee_stores", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("employeeID");

                    b.Property<int>("storeID");

                    b.HasKey("ID");

                    b.HasIndex("employeeID");

                    b.HasIndex("storeID");

                    b.ToTable("employee_stores");
                });

            modelBuilder.Entity("Store_Scheduler.Models.employees", b =>
                {
                    b.Property<int>("employeeID")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("hourlyRate");

                    b.Property<double?>("overtimeRate");

                    b.Property<int>("payType");

                    b.Property<int>("roleID");

                    b.Property<bool>("status");

                    b.Property<int>("userID");

                    b.HasKey("employeeID");

                    b.HasIndex("roleID");

                    b.HasIndex("userID");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Store_Scheduler.Models.roles", b =>
                {
                    b.Property<int>("roleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("roleID");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Store_Scheduler.Models.sales", b =>
                {
                    b.Property<int>("salesID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("date");

                    b.Property<double>("laborCost");

                    b.Property<double>("revenue");

                    b.Property<int>("storeID");

                    b.HasKey("salesID");

                    b.HasIndex("storeID");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("Store_Scheduler.Models.shifts", b =>
                {
                    b.Property<int>("shiftID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("assignedBy");

                    b.Property<int>("employeeID");

                    b.Property<DateTime?>("endTime");

                    b.Property<DateTime>("startTime");

                    b.Property<int>("weeklyScheduleID");

                    b.HasKey("shiftID");

                    b.HasIndex("employeeID");

                    b.HasIndex("weeklyScheduleID");

                    b.ToTable("shifts");
                });

            modelBuilder.Entity("Store_Scheduler.Models.skills", b =>
                {
                    b.Property<int>("skillID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("skillID");

                    b.ToTable("skills");
                });

            modelBuilder.Entity("Store_Scheduler.Models.stores", b =>
                {
                    b.Property<int>("storeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address");

                    b.Property<string>("city");

                    b.Property<string>("phone");

                    b.Property<string>("state");

                    b.Property<string>("storeName");

                    b.Property<string>("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("storeID");

                    b.ToTable("stores");
                });

            modelBuilder.Entity("Store_Scheduler.Models.users", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("birthDate");

                    b.Property<string>("email");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.Property<string>("phone");

                    b.HasKey("userID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Store_Scheduler.Models.weeklySchedule", b =>
                {
                    b.Property<int>("weeklyScheduleID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("date");

                    b.Property<int>("employeeID");

                    b.HasKey("weeklyScheduleID");

                    b.ToTable("weeklySchedule");
                });

            modelBuilder.Entity("Store_Scheduler.Models.department_positions", b =>
                {
                    b.HasOne("Store_Scheduler.Models.departments", "department")
                        .WithMany("Positions")
                        .HasForeignKey("departmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store_Scheduler.Models.shifts", "shift")
                        .WithMany("positions")
                        .HasForeignKey("shiftID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store_Scheduler.Models.skills", "skill")
                        .WithMany("positions")
                        .HasForeignKey("skillID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store_Scheduler.Models.departments", b =>
                {
                    b.HasOne("Store_Scheduler.Models.stores", "store")
                        .WithMany("departments")
                        .HasForeignKey("storeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store_Scheduler.Models.employee_skills", b =>
                {
                    b.HasOne("Store_Scheduler.Models.employees", "employee")
                        .WithMany()
                        .HasForeignKey("employeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store_Scheduler.Models.skills", "skill")
                        .WithMany("employee_skills")
                        .HasForeignKey("skillID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store_Scheduler.Models.employee_stores", b =>
                {
                    b.HasOne("Store_Scheduler.Models.employees", "employee")
                        .WithMany("employee_stores")
                        .HasForeignKey("employeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store_Scheduler.Models.stores", "store")
                        .WithMany("Employee_Stores")
                        .HasForeignKey("storeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store_Scheduler.Models.employees", b =>
                {
                    b.HasOne("Store_Scheduler.Models.roles", "role")
                        .WithMany("employees")
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store_Scheduler.Models.users", "user")
                        .WithMany("employee")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store_Scheduler.Models.sales", b =>
                {
                    b.HasOne("Store_Scheduler.Models.stores", "store")
                        .WithMany("sales")
                        .HasForeignKey("storeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store_Scheduler.Models.shifts", b =>
                {
                    b.HasOne("Store_Scheduler.Models.employees", "employee")
                        .WithMany("shifts")
                        .HasForeignKey("employeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store_Scheduler.Models.weeklySchedule", "weeklySchedule")
                        .WithMany("shifts")
                        .HasForeignKey("weeklyScheduleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
